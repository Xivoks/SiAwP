/* 
DROP TABLE DEPARTMENTS CASCADE CONSTRAINTS PURGE;
DROP TABLE EMPLOYEES CASCADE CONSTRAINTS PURGE;
DROP TABLE JOB_HISTORY CASCADE CONSTRAINTS PURGE;
DROP TABLE JOBS CASCADE CONSTRAINTS PURGE;
DROP TABLE REGIONS CASCADE CONSTRAINTS PURGE;
DROP TABLE COUNTRIES CASCADE CONSTRAINTS PURGE;
DROP TABLE LOCATIONS CASCADE CONSTRAINTS PURGE;

CREATE TABLE brunowj.COUNTRIES AS SELECT * FROM HR.COUNTRIES;
CREATE TABLE brunowj.DEPARTMENTS AS SELECT * FROM HR.DEPARTMENTS;
CREATE TABLE brunowj.EMPLOYEES AS SELECT * FROM HR.EMPLOYEES;
CREATE TABLE brunowj.JOB_GRADES AS SELECT * FROM HR.JOB_GRADES;
CREATE TABLE brunowj.JOB_HISTORY AS SELECT * FROM HR.JOB_HISTORY;
CREATE TABLE brunowj.JOBS AS SELECT * FROM HR.JOBS;
CREATE TABLE brunowj.LOCATIONS AS SELECT * FROM HR.LOCATIONS;
CREATE TABLE brunowj.REGIONS AS SELECT * FROM HR.REGIONS;


-- JOBS definition

ALTER TABLE JOBS
ADD CONSTRAINT jobs_pk PRIMARY KEY (JOB_ID);


-- JOB_GRADES definition

ALTER TABLE JOB_GRADES
ADD CONSTRAINT job_grades_pk PRIMARY KEY (GRADE);



-- REGIONS definition

ALTER TABLE REGIONS
ADD CONSTRAINT REG_ID_PK PRIMARY KEY (REGION_ID);


ALTER TABLE COUNTRIES
ADD CONSTRAINT COUNTRY_C_ID_PK PRIMARY KEY (COUNTRY_ID);

ALTER TABLE COUNTRIES
ADD CONSTRAINT COUNTR_REG_FK FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID);

-- LOCATIONS definition

ALTER TABLE LOCATIONS
ADD CONSTRAINT LOC_ID_PK PRIMARY KEY (LOCATION_ID);

-- DEPARTMENTS definition

ALTER TABLE DEPARTMENTS
ADD CONSTRAINT DEPT_ID_PK PRIMARY KEY (DEPARTMENT_ID);

 

ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMP_EMP_ID_PK PRIMARY KEY (EMPLOYEE_ID);



ALTER TABLE JOB_HISTORY
ADD CONSTRAINT JHIST_EMP_ID_ST_DATE_PK PRIMARY KEY (EMPLOYEE_ID, START_DATE);

-- LOCATIONS foreign keys
ALTER TABLE Locations ADD FOREIGN KEY (Country_ID) REFERENCES Countries(Country_ID);

-- DEPARTMENTS foreign keys

ALTER TABLE DEPARTMENTS ADD CONSTRAINT DEPT_LOC_FK FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID);
ALTER TABLE DEPARTMENTS ADD CONSTRAINT DEPT_MGR_FK FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);


-- EMPLOYEES foreign keys

ALTER TABLE EMPLOYEES ADD CONSTRAINT EMP_DEPT_FK FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT EMP_JOB_FK FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT EMP_MANAGER_FK FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);


-- JOB_HISTORY foreign keys

ALTER TABLE JOB_HISTORY ADD CONSTRAINT JHIST_DEPT_FK FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JHIST_EMP_FK FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JHIST_JOB_FK FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID);

*/
/* ZAD 3
SELECT LAST_NAME || ', ' || SALARY AS wynagrodzenie FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (20, 50) AND SALARY BETWEEN 2000 AND 7000 ORDER BY LAST_NAME;


SELECT HIRE_DATE, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE MANAGER_ID IS NOT NULL
    AND TO_CHAR(HIRE_DATE, 'YYYY') = '2005'
ORDER BY SALARY;


SELECT FIRST_NAME || ' ' || LAST_NAME AS Imie_Nazwisko, SALARY, PHONE_NUMBER
FROM EMPLOYEES
WHERE SUBSTR(LAST_NAME, 3, 1) = 'e' AND FIRST_NAME LIKE '%a%'
ORDER BY LAST_NAME DESC, SALARY;


SELECT
  FIRST_NAME AS imie,
  LAST_NAME AS nazwisko,
  TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) AS liczba_miesiecy_pracy,
  CASE
    WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) <= 150 THEN ROUND(0.1 * SALARY, 2)
    WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) <= 200 THEN ROUND(0.2 * SALARY, 2)
    ELSE ROUND(0.3 * SALARY, 2)
  END AS wysokosc_dodatku
FROM EMPLOYEES
ORDER BY liczba_miesiecy_pracy;


SELECT
  DEPARTMENT_ID AS department_id,
  SUM(SALARY) AS suma_zarobkow,
  ROUND(AVG(SALARY)) AS srednia_zarobkow
FROM EMPLOYEES
WHERE SALARY >= 5000
GROUP BY DEPARTMENT_ID;




SELECT EMPLOYEES.LAST_NAME,EMPLOYEES.DEPARTMENT_ID,EMPLOYEES.JOB_ID from EMPLOYEES 
inner join DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
inner join LOCATIONS ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID WHERE LOCATIONS.CITY='Toronto';


SELECT E1.FIRST_NAME AS Imie_szukanego_pracownika,
       E1.LAST_NAME AS Nazwisko_szukanego_pracownika,
       E2.FIRST_NAME AS Znajomy_Imie,
       E2.LAST_NAME AS Znajomy_Nazwisko
FROM employees E1
INNER JOIN employees E2 ON E1.DEPARTMENT_ID = E2.DEPARTMENT_ID
WHERE E1.FIRST_NAME = 'Jennifer' AND E2.FIRST_NAME != 'Jennifer';

SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME FROM DEPARTMENTS D
LEFT JOIN EMPLOYEES E ON D.DEPARTMENT_ID = E.DEPARTMENT_ID WHERE E.EMPLOYEE_ID IS NULL;


SELECT
    E.FIRST_NAME AS Imiê,
    E.LAST_NAME AS Nazwisko,
    E.JOB_ID AS Id_Pracy,
    D.DEPARTMENT_NAME AS Nazwa_Departamentu,
    E.SALARY AS Zarobki,
    G.GRADE AS Grade
FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
INNER JOIN JOB_GRADES G ON E.SALARY BETWEEN G.MIN_SALARY AND G.MAX_SALARY;


SELECT FIRST_NAME AS Imie, LAST_NAME AS Nazwisko, SALARY AS Zarobki
FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES)
ORDER BY SALARY DESC;
*/
SELECT E.EMPLOYEE_ID AS Id, E.FIRST_NAME AS Imiê, E.LAST_NAME AS Nazwisko
FROM EMPLOYEES E
WHERE E.DEPARTMENT_ID IN (
    SELECT DISTINCT D.DEPARTMENT_ID
    FROM DEPARTMENTS D
    INNER JOIN EMPLOYEES E2 ON D.DEPARTMENT_ID = E2.DEPARTMENT_ID
    WHERE E2.LAST_NAME LIKE '%u%'
);

